; Tournament scheduling - Optimization problem 3
; n=4, weeks=3, periods=2

(set-option :produce-models true)
(set-option :timeout 300000)
(set-logic QF_LIA)

; Match variables
(declare-fun M_0_1 () Int)
(declare-fun P_0_1 () Int)
(declare-fun H_0_1 () Bool)
(declare-fun M_0_2 () Int)
(declare-fun P_0_2 () Int)
(declare-fun H_0_2 () Bool)
(declare-fun M_0_3 () Int)
(declare-fun P_0_3 () Int)
(declare-fun H_0_3 () Bool)
(declare-fun M_1_0 () Int)
(declare-fun P_1_0 () Int)
(declare-fun H_1_0 () Bool)
(declare-fun M_1_2 () Int)
(declare-fun P_1_2 () Int)
(declare-fun H_1_2 () Bool)
(declare-fun M_1_3 () Int)
(declare-fun P_1_3 () Int)
(declare-fun H_1_3 () Bool)
(declare-fun M_2_0 () Int)
(declare-fun P_2_0 () Int)
(declare-fun H_2_0 () Bool)
(declare-fun M_2_1 () Int)
(declare-fun P_2_1 () Int)
(declare-fun H_2_1 () Bool)
(declare-fun M_2_3 () Int)
(declare-fun P_2_3 () Int)
(declare-fun H_2_3 () Bool)
(declare-fun M_3_0 () Int)
(declare-fun P_3_0 () Int)
(declare-fun H_3_0 () Bool)
(declare-fun M_3_1 () Int)
(declare-fun P_3_1 () Int)
(declare-fun H_3_1 () Bool)
(declare-fun M_3_2 () Int)
(declare-fun P_3_2 () Int)
(declare-fun H_3_2 () Bool)

; Objective variables
(declare-fun home_count_0 () Int)
(declare-fun balance_0 () Int)
(declare-fun abs_balance_0 () Int)
(declare-fun home_count_1 () Int)
(declare-fun balance_1 () Int)
(declare-fun abs_balance_1 () Int)
(declare-fun home_count_2 () Int)
(declare-fun balance_2 () Int)
(declare-fun abs_balance_2 () Int)
(declare-fun home_count_3 () Int)
(declare-fun balance_3 () Int)
(declare-fun abs_balance_3 () Int)
(declare-fun max_abs_balance () Int)

; Objective constraints
(assert (= home_count_0 (+ (ite H_0_1 1 0) (ite H_0_2 1 0) (ite H_0_3 1 0))))
(assert (= balance_0 (- (* 2 home_count_0) 3)))
(assert (>= abs_balance_0 balance_0))
(assert (>= abs_balance_0 (- balance_0)))
(assert (= home_count_1 (+ (ite H_1_0 1 0) (ite H_1_2 1 0) (ite H_1_3 1 0))))
(assert (= balance_1 (- (* 2 home_count_1) 3)))
(assert (>= abs_balance_1 balance_1))
(assert (>= abs_balance_1 (- balance_1)))
(assert (= home_count_2 (+ (ite H_2_0 1 0) (ite H_2_1 1 0) (ite H_2_3 1 0))))
(assert (= balance_2 (- (* 2 home_count_2) 3)))
(assert (>= abs_balance_2 balance_2))
(assert (>= abs_balance_2 (- balance_2)))
(assert (= home_count_3 (+ (ite H_3_0 1 0) (ite H_3_1 1 0) (ite H_3_2 1 0))))
(assert (= balance_3 (- (* 2 home_count_3) 3)))
(assert (>= abs_balance_3 balance_3))
(assert (>= abs_balance_3 (- balance_3)))
(assert (>= max_abs_balance 0))
(assert (>= max_abs_balance abs_balance_0))
(assert (>= max_abs_balance abs_balance_1))
(assert (>= max_abs_balance abs_balance_2))
(assert (>= max_abs_balance abs_balance_3))

(exit)