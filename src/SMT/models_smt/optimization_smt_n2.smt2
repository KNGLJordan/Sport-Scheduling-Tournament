(set-option :produce-models true)
(set-logic QF_LIA)
(declare-fun W_0_1 () Int)
(declare-fun P_0_1 () Int)
(declare-fun H_0_1 () Bool)
(declare-fun home_count_0 () Int)
(declare-fun balance_0 () Int)
(declare-fun abs_balance_0 () Int)
(declare-fun home_count_1 () Int)
(declare-fun balance_1 () Int)
(declare-fun abs_balance_1 () Int)
; Objective: maximum absolute balance
(declare-fun max_abs_balance () Int)
(assert (and (>= W_0_1 0) (< W_0_1 1)))
(assert (and (>= P_0_1 0) (< P_0_1 1)))
(assert (= (ite (= W_0_1 0) 1 0) 1))
(assert (= (ite (= W_0_1 0) 1 0) 1))
(assert (= (ite (= W_0_1 0) 1 0) 1))
(assert (= (ite (and (= W_0_1 0) (= P_0_1 0)) 1 0) 1))
(assert (<= (ite (= P_0_1 0) 1 0) 2))
(assert (<= (ite (= P_0_1 0) 1 0) 2))
(assert (= home_count_0 (ite H_0_1 1 0)))
(assert (= home_count_1 (ite (not H_0_1) 1 0)))
(assert (= balance_0 (- (* 2 home_count_0) 1)))
(assert (= balance_1 (- (* 2 home_count_1) 1)))
(assert (>= abs_balance_0 balance_0))
(assert (>= abs_balance_0 (- balance_0)))
(assert (>= abs_balance_1 balance_1))
(assert (>= abs_balance_1 (- balance_1)))
(assert (>= max_abs_balance 0))
(assert (>= max_abs_balance abs_balance_0))
(assert (>= max_abs_balance abs_balance_1))
; Optimization directive (for solvers that support it)
(minimize max_abs_balance)
; Alternative: assert a bound for decision version
; (assert (<= max_abs_balance 1))
(check-sat)
(get-model)
; (get-objectives)