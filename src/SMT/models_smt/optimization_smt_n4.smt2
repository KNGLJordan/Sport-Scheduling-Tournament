(set-option :produce-models true)
(set-logic QF_LIA)
(declare-fun W_0_1 () Int)
(declare-fun P_0_1 () Int)
(declare-fun H_0_1 () Bool)
(declare-fun W_0_2 () Int)
(declare-fun P_0_2 () Int)
(declare-fun H_0_2 () Bool)
(declare-fun W_0_3 () Int)
(declare-fun P_0_3 () Int)
(declare-fun H_0_3 () Bool)
(declare-fun W_1_2 () Int)
(declare-fun P_1_2 () Int)
(declare-fun H_1_2 () Bool)
(declare-fun W_1_3 () Int)
(declare-fun P_1_3 () Int)
(declare-fun H_1_3 () Bool)
(declare-fun W_2_3 () Int)
(declare-fun P_2_3 () Int)
(declare-fun H_2_3 () Bool)
(declare-fun home_count_0 () Int)
(declare-fun balance_0 () Int)
(declare-fun abs_balance_0 () Int)
(declare-fun home_count_1 () Int)
(declare-fun balance_1 () Int)
(declare-fun abs_balance_1 () Int)
(declare-fun home_count_2 () Int)
(declare-fun balance_2 () Int)
(declare-fun abs_balance_2 () Int)
(declare-fun home_count_3 () Int)
(declare-fun balance_3 () Int)
(declare-fun abs_balance_3 () Int)
; Objective: maximum absolute balance
(declare-fun max_abs_balance () Int)
(assert (and (>= W_0_1 0) (< W_0_1 3)))
(assert (and (>= P_0_1 0) (< P_0_1 2)))
(assert (and (>= W_0_2 0) (< W_0_2 3)))
(assert (and (>= P_0_2 0) (< P_0_2 2)))
(assert (and (>= W_0_3 0) (< W_0_3 3)))
(assert (and (>= P_0_3 0) (< P_0_3 2)))
(assert (and (>= W_1_2 0) (< W_1_2 3)))
(assert (and (>= P_1_2 0) (< P_1_2 2)))
(assert (and (>= W_1_3 0) (< W_1_3 3)))
(assert (and (>= P_1_3 0) (< P_1_3 2)))
(assert (and (>= W_2_3 0) (< W_2_3 3)))
(assert (and (>= P_2_3 0) (< P_2_3 2)))
(assert (= (+ (+ (ite (= W_0_1 0) 1 0) (ite (= W_0_2 0) 1 0)) (ite (= W_0_3 0) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_1 1) 1 0) (ite (= W_0_2 1) 1 0)) (ite (= W_0_3 1) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_1 2) 1 0) (ite (= W_0_2 2) 1 0)) (ite (= W_0_3 2) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_1 0) 1 0) (ite (= W_1_2 0) 1 0)) (ite (= W_1_3 0) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_1 1) 1 0) (ite (= W_1_2 1) 1 0)) (ite (= W_1_3 1) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_1 2) 1 0) (ite (= W_1_2 2) 1 0)) (ite (= W_1_3 2) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_2 0) 1 0) (ite (= W_1_2 0) 1 0)) (ite (= W_2_3 0) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_2 1) 1 0) (ite (= W_1_2 1) 1 0)) (ite (= W_2_3 1) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_2 2) 1 0) (ite (= W_1_2 2) 1 0)) (ite (= W_2_3 2) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_3 0) 1 0) (ite (= W_1_3 0) 1 0)) (ite (= W_2_3 0) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_3 1) 1 0) (ite (= W_1_3 1) 1 0)) (ite (= W_2_3 1) 1 0)) 1))
(assert (= (+ (+ (ite (= W_0_3 2) 1 0) (ite (= W_1_3 2) 1 0)) (ite (= W_2_3 2) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (= W_0_1 0) 1 0) (ite (= W_0_2 0) 1 0)) (ite (= W_0_3 0) 1 0)) (ite (= W_1_2 0) 1 0)) (ite (= W_1_3 0) 1 0)) (ite (= W_2_3 0) 1 0)) 2))
(assert (= (+ (+ (+ (+ (+ (ite (= W_0_1 1) 1 0) (ite (= W_0_2 1) 1 0)) (ite (= W_0_3 1) 1 0)) (ite (= W_1_2 1) 1 0)) (ite (= W_1_3 1) 1 0)) (ite (= W_2_3 1) 1 0)) 2))
(assert (= (+ (+ (+ (+ (+ (ite (= W_0_1 2) 1 0) (ite (= W_0_2 2) 1 0)) (ite (= W_0_3 2) 1 0)) (ite (= W_1_2 2) 1 0)) (ite (= W_1_3 2) 1 0)) (ite (= W_2_3 2) 1 0)) 2))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 0) (= P_0_1 0)) 1 0) (ite (and (= W_0_2 0) (= P_0_2 0)) 1 0)) (ite (and (= W_0_3 0) (= P_0_3 0)) 1 0)) (ite (and (= W_1_2 0) (= P_1_2 0)) 1 0)) (ite (and (= W_1_3 0) (= P_1_3 0)) 1 0)) (ite (and (= W_2_3 0) (= P_2_3 0)) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 0) (= P_0_1 1)) 1 0) (ite (and (= W_0_2 0) (= P_0_2 1)) 1 0)) (ite (and (= W_0_3 0) (= P_0_3 1)) 1 0)) (ite (and (= W_1_2 0) (= P_1_2 1)) 1 0)) (ite (and (= W_1_3 0) (= P_1_3 1)) 1 0)) (ite (and (= W_2_3 0) (= P_2_3 1)) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 1) (= P_0_1 0)) 1 0) (ite (and (= W_0_2 1) (= P_0_2 0)) 1 0)) (ite (and (= W_0_3 1) (= P_0_3 0)) 1 0)) (ite (and (= W_1_2 1) (= P_1_2 0)) 1 0)) (ite (and (= W_1_3 1) (= P_1_3 0)) 1 0)) (ite (and (= W_2_3 1) (= P_2_3 0)) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 1) (= P_0_1 1)) 1 0) (ite (and (= W_0_2 1) (= P_0_2 1)) 1 0)) (ite (and (= W_0_3 1) (= P_0_3 1)) 1 0)) (ite (and (= W_1_2 1) (= P_1_2 1)) 1 0)) (ite (and (= W_1_3 1) (= P_1_3 1)) 1 0)) (ite (and (= W_2_3 1) (= P_2_3 1)) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 2) (= P_0_1 0)) 1 0) (ite (and (= W_0_2 2) (= P_0_2 0)) 1 0)) (ite (and (= W_0_3 2) (= P_0_3 0)) 1 0)) (ite (and (= W_1_2 2) (= P_1_2 0)) 1 0)) (ite (and (= W_1_3 2) (= P_1_3 0)) 1 0)) (ite (and (= W_2_3 2) (= P_2_3 0)) 1 0)) 1))
(assert (= (+ (+ (+ (+ (+ (ite (and (= W_0_1 2) (= P_0_1 1)) 1 0) (ite (and (= W_0_2 2) (= P_0_2 1)) 1 0)) (ite (and (= W_0_3 2) (= P_0_3 1)) 1 0)) (ite (and (= W_1_2 2) (= P_1_2 1)) 1 0)) (ite (and (= W_1_3 2) (= P_1_3 1)) 1 0)) (ite (and (= W_2_3 2) (= P_2_3 1)) 1 0)) 1))
(assert (<= (+ (+ (ite (= P_0_1 0) 1 0) (ite (= P_0_2 0) 1 0)) (ite (= P_0_3 0) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_1 1) 1 0) (ite (= P_0_2 1) 1 0)) (ite (= P_0_3 1) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_1 0) 1 0) (ite (= P_1_2 0) 1 0)) (ite (= P_1_3 0) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_1 1) 1 0) (ite (= P_1_2 1) 1 0)) (ite (= P_1_3 1) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_2 0) 1 0) (ite (= P_1_2 0) 1 0)) (ite (= P_2_3 0) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_2 1) 1 0) (ite (= P_1_2 1) 1 0)) (ite (= P_2_3 1) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_3 0) 1 0) (ite (= P_1_3 0) 1 0)) (ite (= P_2_3 0) 1 0)) 2))
(assert (<= (+ (+ (ite (= P_0_3 1) 1 0) (ite (= P_1_3 1) 1 0)) (ite (= P_2_3 1) 1 0)) 2))
(assert (= home_count_0 (+ (+ (ite H_0_1 1 0) (ite H_0_2 1 0)) (ite H_0_3 1 0))))
(assert (= home_count_1 (+ (+ (ite (not H_0_1) 1 0) (ite H_1_2 1 0)) (ite H_1_3 1 0))))
(assert (= home_count_2 (+ (+ (ite (not H_0_2) 1 0) (ite (not H_1_2) 1 0)) (ite H_2_3 1 0))))
(assert (= home_count_3 (+ (+ (ite (not H_0_3) 1 0) (ite (not H_1_3) 1 0)) (ite (not H_2_3) 1 0))))
(assert (= balance_0 (- (* 2 home_count_0) 3)))
(assert (= balance_1 (- (* 2 home_count_1) 3)))
(assert (= balance_2 (- (* 2 home_count_2) 3)))
(assert (= balance_3 (- (* 2 home_count_3) 3)))
(assert (>= abs_balance_0 balance_0))
(assert (>= abs_balance_0 (- balance_0)))
(assert (>= abs_balance_1 balance_1))
(assert (>= abs_balance_1 (- balance_1)))
(assert (>= abs_balance_2 balance_2))
(assert (>= abs_balance_2 (- balance_2)))
(assert (>= abs_balance_3 balance_3))
(assert (>= abs_balance_3 (- balance_3)))
(assert (>= max_abs_balance 0))
(assert (>= max_abs_balance abs_balance_0))
(assert (>= max_abs_balance abs_balance_1))
(assert (>= max_abs_balance abs_balance_2))
(assert (>= max_abs_balance abs_balance_3))
; Optimization directive (for solvers that support it)
(minimize max_abs_balance)
; Alternative: assert a bound for decision version
; (assert (<= max_abs_balance 1))
(check-sat)
(get-model)
; (get-objectives)